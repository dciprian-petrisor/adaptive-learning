# Generated by Django 3.2.4 on 2021-06-13 13:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ALUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('requires_password_reset', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False, verbose_name='is admin')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassRoom',
            fields=[
                ('name', models.CharField(max_length=50, verbose_name='classroom name')),
                ('access_code', models.CharField(max_length=50, primary_key=True, serialize=False, verbose_name='access_code')),
                ('description', models.CharField(max_length=200, verbose_name='classroom description')),
            ],
        ),
        migrations.CreateModel(
            name='PrivateMedia',
            fields=[
                ('original_file_name', models.CharField(max_length=300, null=True, verbose_name='original file name')),
                ('path', models.CharField(max_length=300, primary_key=True, serialize=False, verbose_name='private media path')),
            ],
        ),
        migrations.CreateModel(
            name='ClassRoomPostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(verbose_name='comment date and time')),
                ('text', models.CharField(max_length=1000, verbose_name='comment text')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='comment author')),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.classroom')),
            ],
        ),
        migrations.CreateModel(
            name='ClassRoomPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=80, verbose_name='post title')),
                ('datetime', models.DateTimeField(verbose_name='post date and time')),
                ('text', models.CharField(max_length=1000, verbose_name='post text')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='post author')),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.classroom')),
            ],
        ),
        migrations.CreateModel(
            name='ClassRoomMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_type', models.PositiveSmallIntegerField(choices=[(1, 'student'), (2, 'teacher'), (3, 'owner')])),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.classroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='classroom',
            name='members',
            field=models.ManyToManyField(through='backend.ClassRoomMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='aluser',
            name='icon',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='backend.privatemedia'),
        ),
        migrations.AddField(
            model_name='aluser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
